#
# asterisk-chan-quectel
#

CMAKE_MINIMUM_REQUIRED(VERSION 3.22.1)

FUNCTION(FindClangFormat OutVar)
    UNSET(CLANG_FORMAT_EXE)

    FILE(REAL_PATH "~" HOME_DIR EXPAND_TILDE)
    CMAKE_PATH(APPEND HOME_DIR .vscode extensions OUTPUT_VARIABLE VSCODE_EXTENSIONS_DIR)
    IF(EXISTS ${VSCODE_EXTENSIONS_DIR})
        FILE(GLOB CPPTOOLS_DIR "${VSCODE_EXTENSIONS_DIR}/ms-vscode.cpptools*")
        FOREACH(P ${CPPTOOLS_DIR})
            CMAKE_PATH(APPEND P LLVM bin OUTPUT_VARIABLE VSE_BIN_DIR)
            IF(NOT EXISTS ${VSE_BIN_DIR})
                CONTINUE()
            ENDIF()

            FIND_PROGRAM(CLANG_FORMAT_EXE NAME clang-format HINTS ${VSE_BIN_DIR} NO_CACHE NO_DEFAULT_PATH)
            IF(NOT ${CLANG_FORMAT_EXE} STREQUAL CLANG_FORMAT_EXE-NOTFOUND)
                SET(${OutVar} ${CLANG_FORMAT_EXE} PARENT_SCOPE)
                RETURN()
            ENDIF()
        ENDFOREACH()
    ENDIF()

    FIND_PROGRAM(CLANG_FORMAT_EXE NAME clang-format NO_CACHE)
    IF(${CLANG_FORMAT_EXE} STREQUAL CLANG_FORMAT_EXE-NOTFOUND)
        SET(${OutVar} ${CLANG_FORMAT_EXE} PARENT_SCOPE)
    ELSE()
        SET(${OutVar} ${OutVar}-NOTFOUND PARENT_SCOPE)
    ENDIF()
ENDFUNCTION()

FUNCTION(SetProjectVersion cmajor cminor cpatch ctweak cstatus)
    MATH(EXPR MMAJOR "${cmajor}")
    MATH(EXPR MMINOR "${cminor}")
    MATH(EXPR MPATCH "${cpatch}")
    MATH(EXPR MTWEAK "${ctweak}")
    IF(${cstatus} MATCHES "dirty$")
        SET(IS_DIRTY 1)
    ELSE()
        UNSET(IS_DIRTY)
    ENDIF()

    IF(${MTWEAK} LESS_EQUAL 0 AND NOT IS_DIRTY)
        # short form
        SET(CHAN_VER_STR "${MMAJOR}.${MMINOR}.${MPATCH}" PARENT_SCOPE)
        SET(CHAN_VER_FSTR "${MMAJOR}.${MMINOR}.${MPATCH}" PARENT_SCOPE)
    ELSE()
        # long form
        SET(CHAN_VER_STR "${MMAJOR}.${MMINOR}.${MPATCH}-${MTWEAK}${cstatus}" PARENT_SCOPE)
        SET(CHAN_VER_FSTR "${MMAJOR}.${MMINOR}.${MPATCH}_${MTWEAK}${cstatus}" PARENT_SCOPE)
    ENDIF()
ENDFUNCTION()

SET(CLANG_FORMAT CLANG_FORMAT-NOTFOUND CACHE FILEPATH "C/C++/Java/JavaScript/JSON/Objective-C/Protobuf/C# code formatter")
IF(NOT CLANG_FORMAT OR "${CLANG_FORMAT}" STREQUAL CLANG_FORMAT-NOTFOUND)
    UNSET(CLANG_FORMAT_PATH)
    FindClangFormat(CLANG_FORMAT_PATH)
    MESSAGE(STATUS "Found clang-format: ${CLANG_FORMAT_PATH}")
    SET(CLANG_FORMAT ${CLANG_FORMAT_PATH} CACHE FILEPATH "C/C++/Java/JavaScript/JSON/Objective-C/Protobuf/C# code formatter" FORCE)
    UNSET(CLANG_FORMAT_PATH)
ENDIF()

#
#
# CHAN_SOURCE_VERSION = git hash
# CHAN_SOURCE_TS = timestamp of ${CHAN_SOURCE_VERSION}
#
# CHAN_VER_MAJOR CHAN_VER_MINOR CHAN_VER_PATCH CHAN_VER_TWEAK
#
# CHAN_STATUS
#

UNSET(OPENWRT_PACKAGE)
UNSET(CHAN_SOURCE_VERSION)
UNSET(CHAN_SOURCE_TS)
UNSET(CHAN_STATUS)

IF(IS_DIRECTORY ${CMAKE_SOURCE_DIR}/.git)
    SET(IS_GIT_REPO "TRUE")
    FIND_PROGRAM(GIT_EXECUTABLE git REQUIRED)
    EXECUTE_PROCESS(
        COMMAND ${GIT_EXECUTABLE} describe --abbrev=6 --dirty --match "v*" --long --tags
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_DESCRIBE
        RESULT_VARIABLE GIT_ERROR_CODE
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    IF(NOT GIT_ERROR_CODE)
        STRING(REGEX MATCH "^v([0-9]+)\\.([0-9]+)\\.([0-9]+)(-([0-9]+)(-.+))?$" PROGRAM_VERSION_MATCH ${GIT_DESCRIBE})
        SET(CHAN_VER_MAJOR ${CMAKE_MATCH_1})
        SET(CHAN_VER_MINOR ${CMAKE_MATCH_2})
        SET(CHAN_VER_PATCH ${CMAKE_MATCH_3})
        SET(CHAN_VER_TWEAK ${CMAKE_MATCH_5})
        set(CHAN_STATUS ${CMAKE_MATCH_6})
        SET(OPENWRT_PACKAGE 1)
    ELSE()
        UNSET(CHAN_STATUS)
        MESSAGE(FATAL_ERROR "Git - unable to describe")
    ENDIF()

    EXECUTE_PROCESS(
        COMMAND ${GIT_EXECUTABLE} log -n 1 "--pretty=format:%H;%ct"
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_LOG
        RESULT_VARIABLE GIT_ERROR_CODE
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    IF(NOT GIT_ERROR_CODE)
        LIST(GET GIT_LOG 0 CHAN_SOURCE_VERSION)
        LIST(GET GIT_LOG 1 CHAN_SOURCE_TS)
    ELSE()
        MESSAGE(FATAL_ERROR "Git - unable to get timestamp of last commit")
    ENDIF()
ELSE()
    UNSET(IS_GIT_REPO)
    IF(EXISTS ${CMAKE_SOURCE_DIR}/pkg-vars.cmake)
        INCLUDE(${CMAKE_SOURCE_DIR}/pkg-vars.cmake)
    ENDIF()
ENDIF()

IF(NOT(DEFINED CHAN_VER_MAJOR AND DEFINED CHAN_VER_MINOR AND DEFINED CHAN_VER_PATCH AND DEFINED CHAN_VER_TWEAK))
    MESSAGE(WARNING "Unknown project version - using defaults based on current timestamp")
    SET(CHAN_SOURCE_VERSION "NOTFOUND")
    SET(CHAN_SOURCE_TS 0)
    STRING(TIMESTAMP CHAN_VER_MAJOR "%Y" UTC)
    STRING(TIMESTAMP CHAN_VER_MINOR "%m" UTC)
    STRING(TIMESTAMP CHAN_VER_PATCH "%d" UTC)
    STRING(TIMESTAMP CHAN_VER_TWEAK "%H%M" UTC)
    SET(CHAN_STATUS "-unversioned")
ENDIF()

SetProjectVersion(${CHAN_VER_MAJOR} ${CHAN_VER_MINOR} ${CHAN_VER_PATCH} ${CHAN_VER_TWEAK} ${CHAN_STATUS})
MESSAGE(DEBUG "Source version: ${CHAN_SOURCE_VERSION} [${CHAN_SOURCE_TS}]")
MESSAGE(STATUS "Project version: ${CHAN_VER_STR}")

# CMake

IF(OPENWRT_PACKAGE)
    OPTION(OPENWRT_PACKAGE_STANDALONE "OpenWRT standalone package" ON)
ENDIF()
SET(ASTERISK_VERSION_NUM 180000 CACHE STRING "Asterisk version")
OPTION(ICONV_CONST "iconv() const declaration of input buffer" OFF)
OPTION(USE_SYSV_UUCP_LOCKS "Use SYSV-style UUCP device locks" OFF)
SET(ICONV_T iconv_t CACHE STRING "iconv type")
SET(AST_MODULE chan_quectel)

INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckSymbolExists)

PROJECT(asterisk-chan-quectel
    VERSION ${CHAN_VER_MAJOR}.${CHAN_VER_MINOR}.${CHAN_VER_PATCH}.${CHAN_VER_TWEAK}
    HOMEPAGE_URL "http://github.com/RoEdAl/asterisk-chan-quectel"
    DESCRIPTION "Asterisk channel driver for Quectel modules"
    LANGUAGES C
)

SET(CMAKE_REQUIRED_DEFINITIONS "-DAST_MODULE_SELF_SYM=__internal_chan_quectel_self")
CHECK_INCLUDE_FILE(asterisk.h HAVE_ASTERISK_H)

IF(NOT HAVE_ASTERISK_H)
    MESSAGE(FATAL_ERROR "Asterisk header not found. Cannot continue.")
ENDIF()

CHECK_INCLUDE_FILES("stdarg.h;asterisk.h;asterisk/frame.h" HAVE_ASTERISK_FRAME_H)
CHECK_SYMBOL_EXISTS(AST_CONTROL_SRCCHANGE "stdarg.h;asterisk.h;asterisk/frame.h" HAVE_AST_CONTROL_SRCCHANGE)

CHECK_INCLUDE_FILE(fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)

CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
CHECK_SYMBOL_EXISTS(memchr memory.h HAVE_MEMCHR)
CHECK_SYMBOL_EXISTS(memmove memory.h HAVE_MEMMOVE)
CHECK_SYMBOL_EXISTS(memset memory.h HAVE_MEMSET)

CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)

CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
CHECK_SYMBOL_EXISTS(realpath stdlib.h HAVE_REALPATH)
CHECK_SYMBOL_EXISTS(strtol stdlib.h HAVE_STRTOL)

CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
CHECK_SYMBOL_EXISTS(memmem string.h HAVE_MEMMEM)

CHECK_INCLUDE_FILE(strings.h HAVE_STRINGS_H)
CHECK_SYMBOL_EXISTS(strcasecmp strings.h HAVE_STRCASECMP)
CHECK_SYMBOL_EXISTS(strncasecmp strings.h HAVE_STRNCASECMP)

CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(sys/time.h HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE(termios.h HAVE_TERMIOS_H)
CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)

FIND_PACKAGE(Threads REQUIRED)
FIND_PACKAGE(ALSA REQUIRED)
FIND_PACKAGE(SQLite3 REQUIRED)
FIND_PACKAGE(Iconv REQUIRED)

IF(ICONV_CONST)
    SET(ICONV_CONST_STR "const")
ELSE()
    SET(ICONV_CONST_STR "/**/")
ENDIF()

IF(HAVE_AST_CONTROL_SRCCHANGE)
    SET(HAVE_AST_CONTROL_SRCCHANGE_STR 1)
ELSE()
    SET(HAVE_AST_CONTROL_SRCCHANGE_STR "/**/")
ENDIF()

CONFIGURE_FILE(config.h.in include/config.h)

INCLUDE(GNUInstallDirs)

IF(DEFINED OPENWRT_PACKAGE)
    ADD_SUBDIRECTORY(openwrt)
ENDIF()
ADD_SUBDIRECTORY(src)

#
# CPack
# Based on: http://decovar.dev/blog/2021/09/23/cmake-cpack-package-deb-apt/
#

IF(NOT DEFINED CPACK_PACKAGE_ARCHITECTURE)
    FIND_PROGRAM(DPKG_EXECUTABLE dpkg)
    IF(NOT DPKG_EXECUTABLE)
        MESSAGE(WARNING "Can not find dpkg in your path, setting CPACK_PACKAGE_ARCHITECTURE to amd64.")
        SET(CPACK_PACKAGE_ARCHITECTURE amd64)
    ELSE()
        EXECUTE_PROCESS(
            COMMAND "${DPKG_EXECUTABLE}" --print-architecture
            OUTPUT_VARIABLE CPACK_PACKAGE_ARCHITECTURE
            OUTPUT_STRIP_TRAILING_WHITESPACE
        )
    ENDIF()
ENDIF()

SET(CPACK_PACKAGE_VERSION ${CHAN_VER_STR})
SET(CPACK_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${CHAN_VER_FSTR}_${CPACK_PACKAGE_ARCHITECTURE}")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "${CMAKE_PROJECT_DESCRIPTION}")
SET(CPACK_PACKAGE_DESCRIPTION "Asterisk channel driver for Quectel and SimCOM modules.")
IF(NOT DEFINED CPACK_PACKAGE_CONTACT)
    SET(CPACK_PACKAGE_CONTACT "roed@onet.eu")
ENDIF()

SET(CPACK_GENERATOR "TGZ;DEB")
SET(CPACK_DEBIAN_FILE_NAME "${CMAKE_PROJECT_NAME}_${CHAN_VER_FSTR}_${CPACK_PACKAGE_ARCHITECTURE}.deb")
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "Edmunt Pienkowsky <${CPACK_PACKAGE_CONTACT}>")
SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libasound2, libsqlite3-0, asterisk")
SET(CPACK_DEBIAN_PACKAGE_SECTION comm)
SET(CPACK_DEBIAN_PACKAGE_PRIORITY optional)
SET(CPACK_DEBIAN_PACKAGE_RECOMMENDS "usb-modeswitch")
SET(CPACK_DEBIAN_PACKAGE_ENHANCES "asterisk")

FILE(COPY cpack/deb DESTINATION cpack
    FILE_PERMISSIONS OWNER_WRITE OWNER_READ GROUP_READ WORLD_READ
    PATTERN "postinst" PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_EXECUTE WORLD_READ
)
SET(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA ${PROJECT_BINARY_DIR}/cpack/deb/conffiles ${PROJECT_BINARY_DIR}/cpack/deb/postinst)

SET(CPACK_SOURCE_GENERATOR "TGZ")
SET(CPACK_SOURCE_PACKAGE_FILE_NAME "${CMAKE_PROJECT_NAME}_${CHAN_VER_FSTR}_src")
SET(CPACK_SOURCE_IGNORE_FILES "/build/;/install/;/package/;/test/;/tools/;/\.vscode/;/\.git/;/\.gitignore;/\.gitattributes")

INCLUDE(CPack)
